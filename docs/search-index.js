crystal_doc_search_index_callback({"repository_name":"github.com/ilanusse/praetorian","body":"# Praetorian\n[![Build Status](https://travis-ci.org/ilanusse/praetorian.svg?branch=master)](https://travis-ci.org/ilanusse/praetorian)\n[![Version](https://img.shields.io/github/tag/ilanusse/praetorian.svg?maxAge=360)](https://github.com/ilanusse/praetorian/releases/latest)\n[![License](https://img.shields.io/github/license/ilanusse/praetorian.svg)](https://github.com/ilanusse/praetorian/blob/master/LICENSE)\n\nPraetorian is a minimalist Crystal authorization system inspired by [Pundit](https://github.com/varvet/pundit). It aims to be both lightweight and dependency-less.\n\n## Installation\n\n```crystal\ndependencies:\n  praetorian:\n    github: ilanusse/praetorian\n```\n\n## How to use\n\nPraetorian, inspired by Pundit, works with policy classes. This shard is not designed to be extra compatible with any framework but rather with flexibility in mind.\nThis is a simple example that allows updating\na post if the user is an admin, or if the post is unpublished:\n\n```crystal\nclass Post\n  def policy_class\n    PostPolicy\n  end\nend\n\n\nclass PostPolicy\n  include Praetorian::Policy\n\n  property user, post\n\n  def initialize(user, post)\n    @user = user\n    @post = post\n  end\n\n  def update?\n    user.admin? || !post.published?\n  end\nend\n\n\n# Somewhere in your code\ndef update\n  @post = Post.find(params[:id])\n  Praetorian.authorize(current_user, @post, :update?) # You can also use .authorise if you're a Brit\n  # Rest of code flow\nend\n```\n\nThere are two things to notice here:\n- The Post is a class that should obey a certain Policy. We can either write a `policy_class` method to return the policy class name, or Praetorian will assume the policy classname to be `#{variable_name}Policy`.\n\n- The Policy class includes `Praetorian::Policy`. This adds default query methods to our policy as defaults that should be overwritten as necessary.\n\nThe default query methods defined in `Praetorian::Policy` are: `index?`, `show?`, `create?`, `new?`, `update?`, `edit?`, `destroy?`.\n\nA `Praetorian::NotAuthorizedException` will be raised if the user is not authorized to perform said query on the record.\n\nOk. So far, pretty simple.\n\nYou can set up a simple base class to inherit from:\n\n```crystal\nclass ApplicationPolicy\n  include Praetorian::Policy\n\n  property user, object\n\n  def initialize(user, object)\n    @user = user\n    @object = object\n  end\nend\n```\n\n### Including the shard as a module\n\nYou can include the shard as a module in your controller base class to avoid the prefix:\n\n```crystal\nclass ApplicationController\n  include Praetorian\nend\n\nclass PostController < ApplicationController\n  @post = Post.find(params[:id])\n  authorize(current_user, @post, :update?) # yay no prefix\nend\n```\n\n### Using a specific policy class\nYou can pass an argument to override the policy class if necessary. For example:\n\n```crystal\ndef create\n  @publication = find_publication # assume this method returns any model that behaves like a publication\n  # @publication.class => Post\n  Praetorian.authorize(current_user, @publication, :create?, PublicationPolicy)\n  # Rest of code flow\nend\n```\n\n# License\n\nLicensed under the MIT license, see the separate LICENSE.txt file.\n","program":{"html_id":"github.com/ilanusse/praetorian/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/ilanusse/praetorian","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/ilanusse/praetorian/Praetorian","path":"Praetorian.html","kind":"module","full_name":"Praetorian","name":"Praetorian","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"praetorian/version.cr","line_number":1,"url":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/version.cr"},{"filename":"praetorian.cr","line_number":3,"url":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr"},{"filename":"praetorian/policy.cr","line_number":1,"url":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr"}],"repository_name":"github.com/ilanusse/praetorian","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.3.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"authorise(user,object,query,policy_class)-macro","html_id":"authorise(user,object,query,policy_class)-macro","name":"authorise","doc":"\nSame as .authorize\n","summary":"<p>Same as .authorize </p>","abstract":false,"args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"policy_class","doc":null,"default_value":"","external_name":"policy_class","restriction":""}],"args_string":"(user, object, query, policy_class)","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L40","def":{"name":"authorise","args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"policy_class","doc":null,"default_value":"","external_name":"policy_class","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    authorize(\n{{ user }}\n, \n{{ object }}\n, \n{{ query }}\n, \n{{ policy_class }}\n)\n  \n"}},{"id":"authorise(user,object,query)-macro","html_id":"authorise(user,object,query)-macro","name":"authorise","doc":null,"summary":null,"abstract":false,"args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(user, object, query)","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L44","def":{"name":"authorise","args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    authorize(\n{{ user }}\n, \n{{ object }}\n, \n{{ query }}\n)\n  \n"}},{"id":"authorize(user,object,query,policy_class)-macro","html_id":"authorize(user,object,query,policy_class)-macro","name":"authorize","doc":"\nRetrieves the policy for the given object, initializing it with the\nobject and user and finally throwing an error if the user is not\nauthorized to perform the given action.\n","summary":"<p>Retrieves the policy for the given object, initializing it with the object and user and finally throwing an error if the user is not authorized to perform the given action.</p>","abstract":false,"args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"policy_class","doc":null,"default_value":"","external_name":"policy_class","restriction":""}],"args_string":"(user, object, query, policy_class)","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L18","def":{"name":"authorize","args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"policy_class","doc":null,"default_value":"","external_name":"policy_class","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    policy = \n{{ policy_class }}\n.new(\n{{ user }}\n, \n{{ object }}\n)\n\n    Praetorian.check_auth(\n{{ query }}\n, \n{{ object }}\n, policy)\n  \n"}},{"id":"authorize(user,object,query)-macro","html_id":"authorize(user,object,query)-macro","name":"authorize","doc":null,"summary":null,"abstract":false,"args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(user, object, query)","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L24","def":{"name":"authorize","args":[{"name":"user","doc":null,"default_value":"","external_name":"user","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    single_object = \n{{ object }}\n.is_a?(Array) ? \n{{ object }}\n.last : \n{{ object }}\n\n    policy = if single_object.responds_to?(:policy_class)\n      \n# Use the defined policy class\n\n      single_object.policy_class.new(\n{{ user }}\n, single_object)\n    \nelse\n      \n# Try and use an implicit Policy class using object variable. e.g. var named post -> PostPolicy\n\n      \n{{ object.stringify.camelcase.id }}\nPolicy.new(\n{{ user }}\n, single_object)\n    \nend\n\n    Praetorian.check_auth(\n{{ query }}\n, \n{{ object }}\n, policy)\n  \n"}},{"id":"check_auth(query,object,policy)-macro","html_id":"check_auth(query,object,policy)-macro","name":"check_auth","doc":"\nPerforms actual policy query check\n","summary":"<p>Performs actual policy query check </p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":""}],"args_string":"(query, object, policy)","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L51","def":{"name":"check_auth","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    raise \n{{ NotAuthorizedException }}\n.new(\n{{ query }}\n, \n{{ object }}\n, policy) unless policy.\n{{ query.id }}\n\n    \n{{ object }}\n\n  \n"}}],"types":[{"html_id":"github.com/ilanusse/praetorian/Praetorian/NotAuthorizedException","path":"Praetorian/NotAuthorizedException.html","kind":"class","full_name":"Praetorian::NotAuthorizedException","name":"NotAuthorizedException","abstract":false,"superclass":{"html_id":"github.com/ilanusse/praetorian/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/ilanusse/praetorian/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/ilanusse/praetorian/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ilanusse/praetorian/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"praetorian.cr","line_number":7,"url":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr"}],"repository_name":"github.com/ilanusse/praetorian","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ilanusse/praetorian/Praetorian","kind":"module","full_name":"Praetorian","name":"Praetorian"},"doc":"\nException that will be raised when authorization has failed.\n","summary":"<p>Exception that will be raised when authorization has failed.</p>","class_methods":[],"constructors":[{"id":"new(query,object,policy)-class-method","html_id":"new(query,object,policy)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":""}],"args_string":"(query, object, policy)","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L8","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian.cr#L8","def":{"name":"new","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(query, object, policy)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ilanusse/praetorian/Praetorian/Policy","path":"Praetorian/Policy.html","kind":"module","full_name":"Praetorian::Policy","name":"Policy","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"praetorian/policy.cr","line_number":6,"url":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr"}],"repository_name":"github.com/ilanusse/praetorian","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ilanusse/praetorian/Praetorian","kind":"module","full_name":"Praetorian","name":"Praetorian"},"doc":"\nA Policy is a collection of methods that responds to authorization queries. The ones listed below\nare defaults and should be overwritten when writing Policy classes.\n","summary":"<p>A Policy is a collection of methods that responds to authorization queries.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"create?-instance-method","html_id":"create?-instance-method","name":"create?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L15","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L15","def":{"name":"create?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"destroy?-instance-method","html_id":"destroy?-instance-method","name":"destroy?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L31","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L31","def":{"name":"destroy?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"edit?-instance-method","html_id":"edit?-instance-method","name":"edit?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L27","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L27","def":{"name":"edit?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"update?"}},{"id":"index?-instance-method","html_id":"index?-instance-method","name":"index?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L7","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L7","def":{"name":"index?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"new?-instance-method","html_id":"new?-instance-method","name":"new?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L19","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L19","def":{"name":"new?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"create?"}},{"id":"show?-instance-method","html_id":"show?-instance-method","name":"show?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L11","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L11","def":{"name":"show?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"update?-instance-method","html_id":"update?-instance-method","name":"update?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L23","source_link":"https://github.com/ilanusse/praetorian/blob/677b1ff6e79e6475fc137187a36be95b5a3b26f4/src/praetorian/policy.cr#L23","def":{"name":"update?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}}],"macros":[],"types":[]}]}]}})